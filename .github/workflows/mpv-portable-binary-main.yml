name: Build MPV Dynamic Portable Binary

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Install minimal system dependencies for building
      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            git \
            meson \
            ninja-build \
            pkg-config \
            nasm \
            autoconf \
            automake \
            libtool \
            python3 \
            python3-pip \
            gperf \
            gettext \
            autopoint \
            xutils-dev
          pip3 install --upgrade mako meson
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Set up environment variables
      - name: Set environment variables
        run: |
          echo "BASE_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "PORTABLE_DIR=$GITHUB_WORKSPACE/mpv-portable" >> $GITHUB_ENV
          echo "BUILD_LIBS_DIR=$GITHUB_WORKSPACE/build_libs" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$GITHUB_WORKSPACE/build_libs/lib/pkgconfig:$GITHUB_WORKSPACE/build_libs/lib64/pkgconfig:$GITHUB_WORKSPACE/build_libs/share/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/build_libs/lib:$GITHUB_WORKSPACE/build_libs/lib64:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PATH=$GITHUB_WORKSPACE/build_libs/bin:$PATH" >> $GITHUB_ENV

      # Create directories
      - name: Create directories
        run: |
          mkdir -p "${{ env.BUILD_LIBS_DIR }}" "${{ env.PORTABLE_DIR }}/bin" "${{ env.PORTABLE_DIR }}/lib"

      # Clone and build zlib
      - name: Clone and build zlib
        run: |
          git clone https://github.com/madler/zlib.git
          cd zlib
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}"
          make -j$(nproc)
          make install
          cd ..

      # Clone and build libpng
      - name: Clone and build libpng
        run: |
          git clone https://github.com/glennrp/libpng.git
          cd libpng
          autoreconf -f -i
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}"
          make -j$(nproc)
          make install
          cd ..

      # Clone and build brotli
      - name: Clone and build brotli
        run: |
          git clone https://github.com/google/brotli.git
          cd brotli
          mkdir build && cd build
          cmake .. -DCMAKE_INSTALL_PREFIX="${{ env.BUILD_LIBS_DIR }}"
          make -j$(nproc)
          make install
          cd ../..

      # Clone and build freetype
      - name: Clone and build freetype
        run: |
          git clone https://gitlab.freedesktop.org/freetype/freetype.git
          cd freetype
          ./autogen.sh
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}" --with-harfbuzz=no
          make -j$(nproc)
          make install
          cd ..

      # Clone and build fribidi
      - name: Clone and build fribidi
        run: |
          git clone https://github.com/fribidi/fribidi.git
          cd fribidi
          ./autogen.sh
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}" --disable-docs
          make -C lib -j$(nproc) && make -C bin -j$(nproc)
          make install
          cd ..

      # Clone and build harfbuzz
      - name: Clone and build harfbuzz
        run: |
          git clone https://github.com/harfbuzz/harfbuzz.git
          cd harfbuzz
          meson setup build -Dprefix="${{ env.BUILD_LIBS_DIR }}" -Dbuildtype=release
          meson compile -C build
          meson install -C build
          cd ..

      # Clone and build fontconfig
      - name: Clone and build fontconfig
        run: |
          git clone https://gitlab.freedesktop.org/fontconfig/fontconfig.git
          cd fontconfig
          ./autogen.sh
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}" --disable-docs
          make -j$(nproc)
          make install
          cd ..

      # Clone and build glib
      - name: Clone and build glib
        run: |
          git clone https://gitlab.gnome.org/GNOME/glib.git
          cd glib
          meson setup build -Dprefix="${{ env.BUILD_LIBS_DIR }}" -Dbuildtype=release
          meson compile -C build
          meson install -C build
          cd ..

      # Clone and build xorgproto
      - name: Clone and build xorgproto
        run: |
          git clone https://gitlab.freedesktop.org/xorg/proto/xorgproto.git
          cd xorgproto
          ./autogen.sh
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}"
          make -j$(nproc)
          make install
          ls -l "${{ env.BUILD_LIBS_DIR }}/lib/pkgconfig" "${{ env.BUILD_LIBS_DIR }}/share/pkgconfig"  # Verify xproto.pc, randrproto.pc, etc.
          cd ..

      # Clone and build xcb-proto
      - name: Clone and build xcb-proto
        run: |
          git clone https://gitlab.freedesktop.org/xorg/proto/xcbproto.git
          cd xcbproto
          ./autogen.sh
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}"
          make -j$(nproc)
          make install
          ls -l "${{ env.BUILD_LIBS_DIR }}/lib/pkgconfig" "${{ env.BUILD_LIBS_DIR }}/share/pkgconfig"  # Verify xcb-proto.pc
          cd ..

      # Clone and build libXau
      - name: Clone and build libXau
        run: |
          git clone https://gitlab.freedesktop.org/xorg/lib/libxau.git
          cd libxau
          ./autogen.sh
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}"
          make -j$(nproc)
          make install
          ls -l "${{ env.BUILD_LIBS_DIR }}/lib/pkgconfig" "${{ env.BUILD_LIBS_DIR }}/share/pkgconfig"  # Verify xau.pc
          cd ..

      # Clone and build libxcb
      - name: Clone and build libxcb
        run: |
          git clone https://gitlab.freedesktop.org/xorg/lib/libxcb.git
          cd libxcb
          export PKG_CONFIG_PATH="${{ env.PKG_CONFIG_PATH }}"
          ./autogen.sh
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}"
          make -j$(nproc)
          make install
          cd ..

      # Clone and build libX11
      - name: Clone and build libX11
        run: |
          git clone https://gitlab.freedesktop.org/xorg/lib/libx11.git
          cd libx11
          ./autogen.sh
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}"
          make -j$(nproc)
          make install
          ls -l "${{ env.BUILD_LIBS_DIR }}/lib/pkgconfig" "${{ env.BUILD_LIBS_DIR }}/share/pkgconfig"  # Verify x11.pc
          cd ..

      # Clone and build libXext
      - name: Clone and build libXext
        run: |
          git clone https://gitlab.freedesktop.org/xorg/lib/libxext.git
          cd libxext
          ./autogen.sh
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}"
          make -j$(nproc)
          make install
          ls -l "${{ env.BUILD_LIBS_DIR }}/lib/pkgconfig" "${{ env.BUILD_LIBS_DIR }}/share/pkgconfig"  # Verify xext.pc
          cd ..

      # Clone and build libXrender
      - name: Clone and build libXrender
        run: |
          git clone https://gitlab.freedesktop.org/xorg/lib/libxrender.git
          cd libxrender
          ./autogen.sh
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}"
          make -j$(nproc)
          make install
          ls -l "${{ env.BUILD_LIBS_DIR }}/lib/pkgconfig" "${{ env.BUILD_LIBS_DIR }}/share/pkgconfig"  # Verify xrender.pc
          cd ..

      # Clone and build libxkbcommon
      - name: Clone and build libxkbcommon
        run: |
          git clone https://github.com/xkbcommon/libxkbcommon.git
          cd libxkbcommon
          meson setup build -Dprefix="${{ env.BUILD_LIBS_DIR }}" -Dbuildtype=release -Denable-wayland=false
          meson compile -C build
          meson install -C build
          cd ..

      # Clone and build libxrandr
      - name: Clone and build libxrandr
        run: |
          git clone https://gitlab.freedesktop.org/xorg/lib/libxrandr.git
          cd libxrandr
          ./autogen.sh
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}"
          make -j$(nproc)
          make install
          cd ..

      # Clone and build libxinerama
      - name: Clone and build libxinerama
        run: |
          git clone https://gitlab.freedesktop.org/xorg/lib/libxinerama.git
          cd libxinerama
          ./autogen.sh
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}"
          make -j$(nproc)
          make install
          cd ..

      # Clone and build mesa
      - name: Clone and build mesa
        run: |
          git clone https://gitlab.freedesktop.org/mesa/mesa.git
          cd mesa
          meson setup build -Dprefix="${{ env.BUILD_LIBS_DIR }}" -Dbuildtype=release -Dglx=disabled -Dgles1=disabled -Dgles2=disabled -Dgbm=disabled
          meson compile -C build
          meson install -C build
          cd ..

      # Clone and build alsa-lib
      - name: Clone and build alsa-lib
        run: |
          git clone https://github.com/alsa-project/alsa-lib.git
          cd alsa-lib
          ./autogen.sh
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}"
          make -j$(nproc)
          make install
          cd ..

      # Clone and build openssl
      - name: Clone and build openssl
        run: |
          git clone https://github.com/openssl/openssl.git
          cd openssl
          ./config --prefix="${{ env.BUILD_LIBS_DIR }}" --openssldir="${{ env.BUILD_LIBS_DIR }}/ssl"
          make -j$(nproc)
          make install
          cd ..

      # Clone libass
      - name: Clone libass
        run: |
          if [ -d "libass/.git" ]; then
            cd libass && git reset --hard && git pull && cd ..
          else
            git clone https://github.com/libass/libass.git
          fi

      # Build libass
      - name: Build libass
        run: |
          cd libass
          ./autogen.sh
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}"
          make -j$(nproc)
          make install
          cd ..

      # Clone FFmpeg
      - name: Clone FFmpeg
        run: |
          if [ -d "ffmpeg/.git" ]; then
            cd ffmpeg && git reset --hard && git pull && cd ..
          else
            git clone https://github.com/FFmpeg/FFmpeg.git ffmpeg
          fi

      # Build FFmpeg
      - name: Build FFmpeg
        run: |
          cd ffmpeg
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}" --enable-gpl --enable-libass --enable-openssl --enable-version3
          make -j$(nproc)
          make install
          cd ..

      # Clone libplacebo
      - name: Clone libplacebo
        run: |
          if [ -d "libplacebo/.git" ]; then
            cd libplacebo && git reset --hard && git pull && cd ..
          else
            git clone https://github.com/haasn/libplacebo.git
          fi

      # Build libplacebo
      - name: Build libplacebo
        run: |
          cd libplacebo
          git submodule update --init
          rm -rf build
          meson setup build -Dprefix="${{ env.BUILD_LIBS_DIR }}" -Dbuildtype=release
          meson compile -C build
          meson install -C build
          cd ..

      # Clone MPV
      - name: Clone MPV
        run: |
          if [ -d "mpv/.git" ]; then
            cd mpv && git reset --hard && git pull && cd ..
          else
            git clone https://github.com/mpv-player/mpv.git
          fi

      # Build MPV
      - name: Build MPV
        run: |
          cd mpv
          meson setup build \
            -Dx11=enabled \
            -Dwayland=disabled \
            -Dlibmpv=false \
            -Dvapoursynth=disabled \
            -Dpulse=disabled \
            -Dalsa=enabled \
            -Dbuildtype=release \
            -Dprefix=/usr \
            -Dc_link_args="-L${{ env.BUILD_LIBS_DIR }}/lib -L${{ env.BUILD_LIBS_DIR }}/lib64" \
            -Dc_args="-I${{ env.BUILD_LIBS_DIR }}/include"
          meson compile -C build
          meson install -C build --destdir "${{ env.PORTABLE_DIR }}"
          cd ..

      # Remove unnecessary desktop files and related assets
      - name: Remove desktop files and assets
        run: |
          rm -rf "${{ env.PORTABLE_DIR }}/usr/share/applications" \
                 "${{ env.PORTABLE_DIR }}/usr/share/icons" \
                 "${{ env.PORTABLE_DIR }}/usr/share/metainfo" \
                 "${{ env.PORTABLE_DIR }}/usr/share/bash-completion" \
                 "${{ env.PORTABLE_DIR }}/usr/share/zsh" \
                 "${{ env.PORTABLE_DIR }}/usr/share/fish"

      # Collect shared libraries
      - name: Collect shared libraries
        run: |
          # Copy MPV binary to portable bin directory
          cp "${{ env.PORTABLE_DIR }}/usr/bin/mpv" "${{ env.PORTABLE_DIR }}/bin/"
          # Copy all shared libraries from build_libs to portable lib directory
          find "${{ env.BUILD_LIBS_DIR }}/lib" "${{ env.BUILD_LIBS_DIR }}/lib64" -name "*.so*" -exec cp {} "${{ env.PORTABLE_DIR }}/lib/" \;
          # Copy specific shared libraries from build_libs explicitly
          for lib in libass.so libplacebo.so; do
            find "${{ env.BUILD_LIBS_DIR }}/lib" "${{ env.BUILD_LIBS_DIR }}/lib64" -name "$lib*" -exec cp {} "${{ env.PORTABLE_DIR }}/lib/" \;
          done
          # Copy dependencies identified by ldd, but only from build_libs
          ldd "${{ env.PORTABLE_DIR }}/bin/mpv" | grep -oP '(?<=> )[^ ]+' | while read -r lib; do
            if [[ "$lib" == "${{ env.BUILD_LIBS_DIR }}"* && -f "$lib" ]]; then
              cp "$lib" "${{ env.PORTABLE_DIR }}/lib/"
            fi
          done
          # Verify dynamic linking
          ldd "${{ env.PORTABLE_DIR }}/bin/mpv"

      # Create a runtime setup script
      - name: Create runtime setup script
        run: |
          cat > "${{ env.PORTABLE_DIR }}/bin/setup-runtime.sh" <<EOF
          #!/bin/bash
          # Check if /run/user/\$UID exists and is writable
          if [ -d "/run/user/\${UID}" ] && [ -w "/run/user/\${UID}" ]; then
            export XDG_RUNTIME_DIR="/run/user/\${UID}"
          else
            # Fallback to ~/.cache/mpv-run
            XDG_RUNTIME_DIR="\$HOME/.cache/mpv-run"
            mkdir -p "\$XDG_RUNTIME_DIR"
            chmod 700 "\$XDG_RUNTIME_DIR"
            export XDG_RUNTIME_DIR
          fi
          EOF
          chmod +x "${{ env.PORTABLE_DIR }}/bin/setup-runtime.sh"

      # Create a wrapper script to set LD_LIBRARY_PATH and run setup
      - name: Create wrapper script
        run: |
          cat > "${{ env.PORTABLE_DIR }}/bin/mpv-wrapper.sh" <<EOF
          #!/bin/bash
          SCRIPT_DIR=\$(dirname "\$(readlink -f "\$0")")
          # Run runtime setup script
          "\$SCRIPT_DIR/setup-runtime.sh"
          # Launch MPV with bundled libraries
          LD_LIBRARY_PATH="\$SCRIPT_DIR/../lib:\$LD_LIBRARY_PATH" "\$SCRIPT_DIR/mpv" "\$@"
          EOF
          chmod +x "${{ env.PORTABLE_DIR }}/bin/mpv-wrapper.sh"

      # Package the portable binary
      - name: Package portable binary
        run: |
          tar -czf mpv-portable.tar.gz -C "${{ env.PORTABLE_DIR }}" .

      # Upload portable binary artifact
      - name: Upload portable binary
        uses: actions/upload-artifact@v4
        with:
          name: mpv-portable
          path: mpv-portable.tar.gz
