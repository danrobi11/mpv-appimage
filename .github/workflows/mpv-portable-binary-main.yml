name: Build MPV Dynamic Portable Binary

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Install system dependencies
      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            git \
            meson \
            ninja-build \
            pkg-config \
            libssl-dev \
            libx11-dev \
            libxext-dev \
            libxpresent-dev \
            libxss-dev \
            libvulkan-dev \
            nasm \
            libfreetype6-dev \
            libfontconfig1-dev \
            libfribidi-dev \
            libharfbuzz-dev \
            libxkbcommon-dev \
            libxrandr-dev \
            libxinerama-dev \
            libgl1-mesa-dev \
            libasound2-dev \
            zlib1g-dev \
            libpng-dev \
            libbrotli-dev \
            libglib2.0-dev

      # Set up environment variables
      - name: Set environment variables
        run: |
          echo "BASE_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "PORTABLE_DIR=$GITHUB_WORKSPACE/mpv-portable" >> $GITHUB_ENV
          echo "BUILD_LIBS_DIR=$GITHUB_WORKSPACE/build_libs" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$GITHUB_WORKSPACE/build_libs/lib/pkgconfig:$GITHUB_WORKSPACE/build_libs/lib/x86_64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

      # Create directories
      - name: Create directories
        run: |
          mkdir -p "${{ env.BUILD_LIBS_DIR }}" "${{ env.PORTABLE_DIR }}/bin" "${{ env.PORTABLE_DIR }}/lib"

      # Clone repositories
      - name: Clone libass
        run: |
          if [ -d "libass/.git" ]; then
            cd libass && git reset --hard && git pull && cd ..
          else
            git clone https://github.com/libass/libass.git
          fi

      - name: Clone FFmpeg
        run: |
          if [ -d "ffmpeg/.git" ]; then
            cd ffmpeg && git reset --hard && git pull && cd ..
          else
            git clone https://github.com/FFmpeg/FFmpeg.git ffmpeg
          fi

      - name: Clone libplacebo
        run: |
          if [ -d "libplacebo/.git" ]; then
            cd libplacebo && git reset --hard && git pull && cd ..
          else
            git clone https://github.com/haasn/libplacebo.git
          fi

      - name: Clone MPV
        run: |
          if [ -d "mpv/.git" ]; then
            cd mpv && git reset --hard && git pull && cd ..
          else
            git clone https://github.com/mpv-player/mpv.git
          fi

      # Build libass
      - name: Build libass
        run: |
          cd libass
          ./autogen.sh
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}"
          make -j$(nproc)
          make install
          cd ..

      # Build FFmpeg
      - name: Build FFmpeg
        run: |
          cd ffmpeg
          ./configure --prefix="${{ env.BUILD_LIBS_DIR }}" --enable-gpl --enable-libass --enable-openssl --enable-version3
          make -j$(nproc)
          make install
          cd ..

      # Build libplacebo
      - name: Build libplacebo
        run: |
          cd libplacebo
          git submodule update --init
          rm -rf build
          meson setup build -Dprefix="${{ env.BUILD_LIBS_DIR }}" -Dbuildtype=release
          meson compile -C build
          meson install -C build
          cd ..

      # Build MPV
      - name: Build MPV
        run: |
          cd mpv
          meson setup build \
            -Dx11=enabled \
            -Dwayland=disabled \
            -Dlibmpv=false \
            -Dvapoursynth=disabled \
            -Dpulse=disabled \
            -Dalsa=enabled \
            -Dbuildtype=release \
            -Dprefix=/usr \
            -Dc_link_args="-L${{ env.BUILD_LIBS_DIR }}/lib -L${{ env.BUILD_LIBS_DIR }}/lib/x86_64-linux-gnu" \
            -Dc_args="-I${{ env.BUILD_LIBS_DIR }}/include" \
            -Ddesktop-files=disabled
          meson compile -C build
          meson install -C build --destdir "${{ env.PORTABLE_DIR }}"
          cd ..

      # Collect shared libraries
      - name: Collect shared libraries
        run: |
          # Copy MPV binary to portable bin directory
          cp "${{ env.PORTABLE_DIR }}/usr/bin/mpv" "${{ env.PORTABLE_DIR }}/bin/"
          # Copy all shared libraries from build_libs to portable lib directory
          find "${{ env.BUILD_LIBS_DIR }}/lib" "${{ env.BUILD_LIBS_DIR }}/lib/x86_64-linux-gnu" -name "*.so*" -exec cp {} "${{ env.PORTABLE_DIR }}/lib/" \;
          # Copy specific shared libraries from build_libs explicitly
          for lib in libass.so libplacebo.so; do
            find "${{ env.BUILD_LIBS_DIR }}/lib" "${{ env.BUILD_LIBS_DIR }}/lib/x86_64-linux-gnu" -name "$lib*" -exec cp {} "${{ env.PORTABLE_DIR }}/lib/" \;
          done
          # Copy system libraries for runtime dependencies
          for lib in libfreetype.so libfontconfig.so libfribidi.so libharfbuzz.so libgraphite2.so libxkbcommon.so libxrandr.so libxinerama.so libgl.so libasound.so libXss.so libXpresent.so libvulkan.so libz.so libpthread.so libc.so libpng.so libbrotli.so libglib-2.0.so libXau.so libXdmcp.so libXrender.so libGLdispatch.so libbsd.so libmd.so; do
            find /usr/lib /usr/lib/x86_64-linux-gnu -name "$lib*" -exec cp {} "${{ env.PORTABLE_DIR }}/lib/" \;
          done
          # Copy all dependencies identified by ldd
          ldd "${{ env.PORTABLE_DIR }}/bin/mpv" | grep -oP '(?<=> )[^ ]+' | while read -r lib; do
            if [ -f "$lib" ]; then
              cp "$lib" "${{ env.PORTABLE_DIR }}/lib/"
            fi
          done
          # Verify dynamic linking
          ldd "${{ env.PORTABLE_DIR }}/bin/mpv"

      # Create a runtime setup script
      - name: Create runtime setup script
        run: |
          cat > "${{ env.PORTABLE_DIR }}/bin/setup-runtime.sh" <<EOF
          #!/bin/bash
          # Check if /run/user/\$UID exists and is writable
          if [ -d "/run/user/\${UID}" ] && [ -w "/run/user/\${UID}" ]; then
            export XDG_RUNTIME_DIR="/run/user/\${UID}"
          else
            # Fallback to ~/.cache/mpv-run
            XDG_RUNTIME_DIR="\$HOME/.cache/mpv-run"
            mkdir -p "\$XDG_RUNTIME_DIR"
            chmod 700 "\$XDG_RUNTIME_DIR"
            export XDG_RUNTIME_DIR
          fi
          EOF
          chmod +x "${{ env.PORTABLE_DIR }}/bin/setup-runtime.sh"

      # Create a wrapper script to set LD_LIBRARY_PATH and run setup
      - name: Create wrapper script
        run: |
          cat > "${{ env.PORTABLE_DIR }}/bin/mpv-wrapper.sh" <<EOF
          #!/bin/bash
          SCRIPT_DIR=\$(dirname "\$(readlink -f "\$0")")
          # Run runtime setup script
          "\$SCRIPT_DIR/setup-runtime.sh"
          # Launch MPV with bundled libraries
          LD_LIBRARY_PATH="\$SCRIPT_DIR/../lib:\$LD_LIBRARY_PATH" "\$SCRIPT_DIR/mpv" "\$@"
          EOF
          chmod +x "${{ env.PORTABLE_DIR }}/bin/mpv-wrapper.sh"

      # Package the portable binary
      - name: Package portable binary
        run: |
          tar -czf mpv-portable.tar.gz -C "${{ env.PORTABLE_DIR }}" .

      # Upload portable binary artifact
      - name: Upload portable binary
        uses: actions/upload-artifact@v4
        with:
          name: mpv-portable
          path: mpv-portable.tar.gz
